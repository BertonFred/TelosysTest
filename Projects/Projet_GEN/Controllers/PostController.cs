 //
// GENERATED CODE DO NOT UPDATE
// Telosys Template : csharp-backend / Controller / Xxxcontroller.DTO
// C# class for entity "Post" 
// Created on 2022-12-15 ( Date ISO 2022-12-15 - Time 15:36:04 )
// Generated by Telosys Tools Generator ( version 4.0.0 )
//

using System;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;

using CarModel.Models;
using CarModel.DTO;
using CarModel.Entities;

namespace CarModel.Controllers
{
    /// <summary>
    /// Web service  Post 
    /// Ici on assure le routage vers une URL qui contiendra la dénomination : /api/v1/ et le nom du controleur 
    /// comme d'habitude .NET prendra le soin de supprimer tout seul le texte "Controller" sur le nom du service
    /// 
    /// ApiController : action des controles d'erreur
    /// </summary>
    [Route("api/v1/[controller]")]
    [ApiController]
	public class PostController : ControllerBase
	{
		private EntitiesDbContext _context { get; set; }		

        /// <summary>
        /// Constructeur
        /// </summary>
		public PostController()
		{
			_context = new EntitiesDbContext();
		}

        /// <summary>
        /// READ Liste Post 
        /// Retourne une liste des Post avec un gestion de la pagination.
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="pageSize">Taille de la page.</param>   
        /// <param name="pageIndex">Index du premiere elements dans la page.</param>   
        /// <response code="200">OK, renvois de la liste demandé.</response>
        /// <response code="404">Erreur, non trouvé la liste est vide.</response>
        [HttpGet()]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
		public ActionResult<IEnumerable<Post>> GetPosts([FromQuery]int pageSize = 10,[FromQuery] int pageIndex = 0)
		{
            // FIND ALL with paging
			var lstResult = _context.Posts
                                    .Skip(pageSize * pageIndex)
                                    .Take(pageSize)
                                    .ToList();
            return Ok(lstResult);
		}
		
        /// <summary>
        /// READ Post
        /// Retourne un Post a partir de son identifiant ID
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="id">id du Post doit être supérieur à 0.</param>   
        /// <response code="200">OK, le Post est retourné.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le Post n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpGet()]
        [Route("{id}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status400BadRequest)] 
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<Post> GetPost(long oid)
        {
            // READ
            Post? ReadData = _context.Posts
                                                .FirstOrDefault(item => item.oid == oid);
            if (ReadData == null) 
                return NotFound($"Non trouvé avec l'ID = {oid}");

            return Ok(ReadData);
        }

        /// <summary>
        /// CREATE Post
        /// Creation d'un Post dans la listes des  items
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="createDTO">Données du Post a ajouter.</param>   
        /// <response code="200">OK, le Post est retourné.</response>
        [HttpPost()]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<Post> CreatePost([FromBody]PostCreateDTO createDTO)
        {
            // INSTANCE CREATE
			var ToCreate = new Post();

			// KEYS
			// DATAS
			ToCreate.Title = createDTO.Title;
			ToCreate.Description = createDTO.Description;
			// SAVE
			_context.Posts.Add( ToCreate );
			_context.SaveChanges();

            return Ok(ToCreate);
        }

        /// <summary>
        /// UPDATE Post
        /// Mise a jour d'un Post dans la liste des Posts.
        /// La mise a jour est reéalisé à partir de l'ID
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="id">id du Post doit être supérieur à 0.</param>   
        /// <param name="dataToUpdate">Données du Post a mettre a jour.</param>   
        /// <response code="200">OK, le Post est mise a jour.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le Post n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpPut()]
        [Route("{id}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)] 
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
        public ActionResult  UpdatePost(long oid, [FromBody]PostUpdateDTO updateDTO)
        {
            // FIND ITEM TO UPDATE
			Post ToUpdatePost = _context.Posts
                                                .FirstOrDefault(x => x.oid == updateDTO.oid);
            if (ToUpdatePost == null)
                return NotFound($"Non trouvé avec l'ID = {oid}");

			// KEYS
			ToUpdatePost.oid = updateDTO.oid;
			// DATAS
			ToUpdatePost.Title = updateDTO.Title;
			ToUpdatePost.Description = updateDTO.Description;
			// SAVE
			_context.SaveChanges();

            return Ok();
        }

        /// <summary>
        /// DELETE Post
        /// Supprimer un Post a partir de son identifiant ID
        /// </summary>
        /// <param name="id">id du Post doit être supérieur à 0.</param>   
        /// <response code="200">OK, le Post est supprimé.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le Post n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpDelete()]
        [Route("{id}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult DeletePost(long oid)
        {
			// FIND ITEM to DELETE 
			Post? ToDelete = _context.Posts
                                            .FirstOrDefault(x => x.oid == oid);
			// DELETE 
            if (ToDelete == null)
                return NotFound($"Non trouvé avec l'ID = {oid}");
			_context.Posts.Remove(ToDelete);

			// SAVE
			_context.SaveChanges();

            return Ok();
        }
	}
}
