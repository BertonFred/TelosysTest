// <auto-generated />
using System;
using CarModel.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace wsRestTodoList.Migrations
{
    [DbContext(typeof(EntitiesDbContext))]
    partial class EntitiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("CarModel.Entities.Brand", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<long>("Company_oid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.HasIndex("Company_oid");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CarModel.Entities.Car", b =>
                {
                    b.Property<long>("oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Driver_oid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<short>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("oid");

                    b.HasIndex("BrandCode");

                    b.HasIndex("Driver_oid");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarModel.Entities.Company", b =>
                {
                    b.Property<long>("oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("oid");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("CarModel.Entities.Driver", b =>
                {
                    b.Property<long>("oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("oid");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CarModel.Entities.Brand", b =>
                {
                    b.HasOne("CarModel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Company_oid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CarModel.Entities.Car", b =>
                {
                    b.HasOne("CarModel.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarModel.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("Driver_oid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Driver");
                });
#pragma warning restore 612, 618
        }
    }
}
