 //
// GENERATED CODE DO NOT UPDATE
// Telosys Template : csharp-backend / DAL / EntitiesDbContext_cs.vm
// Patterns : DBContext for Entity Framework
// Created on 2022-11-25 - Time 15:32:57 
// Generated by : csharp-backend 
// Generated by : Telosys Tools Generator 4.0.0
//

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

using CarModel.Entities;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CarModel.Models
{
	public class EntitiesDbContext : DbContext
	{
        public EntitiesDbContext(DbContextOptions<EntitiesDbContext> options)
            : base(options)
        {
            var path = Environment.CurrentDirectory;
            DbPath = System.IO.Path.Join(path, "CarModel.db");
        }

        public EntitiesDbContext()
		{
        	var path = Environment.CurrentDirectory;
        	DbPath = System.IO.Path.Join(path, "CarModel.db");
		}

        /// <summary>
        ///     Override this method to configure the database (and other options) to be used for this context.
        ///     This method is called for each instance of the context that is created.
        ///     The base implementation does nothing.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         In situations where an instance of <see cref="DbContextOptions" /> may or may not have been passed
        ///         to the constructor, you can use <see cref="DbContextOptionsBuilder.IsConfigured" /> to determine if
        ///         the options have already been set, and skip some or all of the logic in
        ///         <see cref="OnConfiguring(DbContextOptionsBuilder)" />.
        ///     </para>
        ///     <para>
        ///         See <see href="https://aka.ms/efcore-docs-dbcontext">DbContext lifetime, configuration, and initialization</see>
        ///         for more information and examples.
        ///     </para>
        /// </remarks>
        /// <param name="optionsBuilder">
        ///     A builder used to create or modify options for this context. Databases (and other extensions)
        ///     typically define extension methods on this object that allow you to configure the context.
        /// </param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		{
			// $$$ optionsBuilder.UseSqlServer(Server=(localdb)\mssqllocaldb;Database=CarModel;Trusted_Connection=True");
        	optionsBuilder.UseSqlite($"Data Source={DbPath}");
		}

        /// <summary>
        ///     Override this method to set defaults and configure conventions before they run. This method is invoked before
        ///     <see cref="OnModelCreating" />.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         If a model is explicitly set on the options for this context (via <see cref="DbContextOptionsBuilder.UseModel(IModel)" />)
        ///         then this method will not be run. However, it will still run when creating a compiled model.
        ///     </para>
        ///     <para>
        ///         See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
        ///         examples.
        ///     </para>
        /// </remarks>
        /// <param name="configurationBuilder">
        ///     The builder being used to set defaults and configure conventions that will be used to build the model for this context.
        /// </param>
        protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
        {
        }

        /// <summary>
        ///     Override this method to further configure the model that was discovered by convention from the entity types
        ///     exposed in <see cref="DbSet{TEntity}" /> properties on your derived context. The resulting model may be cached
        ///     and re-used for subsequent instances of your derived context.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         If a model is explicitly set on the options for this context (via <see cref="DbContextOptionsBuilder.UseModel(IModel)" />)
        ///         then this method will not be run. However, it will still run when creating a compiled model.
        ///     </para>
        ///     <para>
        ///         See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
        ///         examples.
        ///     </para>
        /// </remarks>
        /// <param name="modelBuilder">
        ///     The builder being used to construct the model for this context. Databases (and other extensions) typically
        ///     define extension methods on this object that allow you to configure aspects of the model that are specific
        ///     to a given database.
        /// </param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
        }

        // Database path
        public string DbPath { get; }

		public DbSet<Brand> Brands { get; set; }
		public DbSet<Car> Cars { get; set; }
		public DbSet<Company> Companys { get; set; }
		public DbSet<Driver> Drivers { get; set; }
	}
}
