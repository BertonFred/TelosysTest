#parse("include/init_var.vm")
//
// GENERATED CODE DO NOT UPDATE
// Telosys Template : csharp-backend / Controller / Xxxcontroller.DTO
// C# class for entity "${entity.name}" 
// Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
// Generated by $generator.name ( version $generator.version )
//
$env.setLanguage('C#')
using System;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;

using ${NAMESPACE}.Models;
using ${NAMESPACE}.DTO;
using ${NAMESPACE}.Entities;
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $int = [ "int", "int32", "int64" ] )
#set( $string = "string")
#set( $name = $fn.uncapitalize($entity.name) )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------

namespace ${NAMESPACE}.Controllers
{
    /// <summary>
    /// Web service  ${entity.name} 
    /// Ici on assure le routage vers une URL qui contiendra la dénomination : /api/v1/ et le nom du controleur 
    /// comme d'habitude .NET prendra le soin de supprimer tout seul le texte "Controller" sur le nom du service
    /// 
    /// ApiController : action des controles d'erreur
    /// </summary>
    [Route("api/v1/[controller]")]
    [ApiController]
	public class ${entity.name}Controller : ControllerBase
	{
		private EntitiesDbContext _context { get; set; }		

        /// <summary>
        /// Constructeur avec injection
        /// </summary>
		public ${entity.name}Controller(EntitiesDbContext context)
		{
			_context = context;
		}

        /// <summary>
        /// READ Liste ${entity.name} 
        /// Retourne une liste des ${entity.name} avec un gestion de la pagination.
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="pageSize">Taille de la page.</param>   
        /// <param name="pageIndex">Index du premiere elements dans la page.</param>   
        /// <response code="200">OK, renvois de la liste demandé.</response>
        /// <response code="404">Erreur, non trouvé la liste est vide.</response>
        [HttpGet()]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
		public ActionResult<IEnumerable<${entity.name}>> Get${entity.name}s([FromQuery]int pageSize = 10,[FromQuery] int pageIndex = 0)
		{
            // FIND ALL with paging
			var lstResult = _context.${entity.name}s
                                    .Skip(pageSize * pageIndex)
                                    .Take(pageSize)
                                    .ToList();
            return Ok(lstResult);
		}
		
        /// <summary>
        /// READ ${entity.name}
        /// Retourne un ${entity.name} a partir de son identifiant ID
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="id">id du ${entity.name} doit être supérieur à 0.</param>   
        /// <response code="200">OK, le ${entity.name} est retourné.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le ${entity.name} n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpGet()]
        [Route("{${keyFields[0].formattedName(0)}}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status400BadRequest)] 
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<${entity.name}> Get${entity.name}(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)})
        {
            // READ
            ${entity.name}? ReadData = _context.${entity.name}s
                                                .FirstOrDefault(item => item.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
            if (ReadData == null) 
                return NotFound($"Non trouvé avec l'ID = {${keyFields[0].formattedName(0)}}");

            return Ok(ReadData);
        }

        /// <summary>
        /// CREATE ${entity.name}
        /// Creation d'un ${entity.name} dans la listes des  items
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="createDTO">Données du ${entity.name} a ajouter.</param>   
        /// <response code="200">OK, le ${entity.name} est retourné.</response>
        [HttpPost()]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<${entity.name}> Create${entity.name}([FromBody]${entity.name}CreateDTO createDTO)
        {
            // INSTANCE CREATE
			var ToCreate = new ${entity.name}();

			// KEYS
#foreach( $attribute in $entity.keyAttributes )	  
#if( ${fn.uncapitalize($attribute.formattedType(0))} == $string)
			ToCreate.${attribute.formattedName(0)} = Guid.NewGuid().ToString();
#end
#end
			// DATAS
#foreach( $attribute in $entity.nonKeyAttributes)
			ToCreate.${attribute.name} = createDTO.${attribute.name};
#end
			// SAVE
			_context.${entity.name}s.Add( ToCreate );
			_context.SaveChanges();

            return Ok(ToCreate);
        }

        /// <summary>
        /// UPDATE ${entity.name}
        /// Mise a jour d'un ${entity.name} dans la liste des ${entity.name}s.
        /// La mise a jour est reéalisé à partir de l'ID
        /// </summary>
        /// <remarks>ici une remarque</remarks>
        /// <param name="id">id du ${entity.name} doit être supérieur à 0.</param>   
        /// <param name="dataToUpdate">Données du ${entity.name} a mettre a jour.</param>   
        /// <response code="200">OK, le ${entity.name} est mise a jour.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le ${entity.name} n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpPut()]
        [Route("{${keyFields[0].formattedName(0)}}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)] 
        [ProducesResponseType(StatusCodes.Status404NotFound)] 
        public ActionResult  Update${entity.name}(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)}, [FromBody]${entity.name}UpdateDTO updateDTO)
        {
            // FIND ITEM TO UPDATE
			${entity.name} ToUpdate${entity.name} = _context.${entity.name}s
                                                .FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == updateDTO.${keyFields[0].formattedName(0)});
            if (ToUpdate${entity.name} == null)
                return NotFound($"Non trouvé avec l'ID = {${keyFields[0].formattedName(0)}}");

			// KEYS
#foreach ( $attribute in $keyFields )
			ToUpdate${entity.name}.${attribute.name} = updateDTO.${attribute.name};
#end
			// DATAS
#foreach( $attribute in $entity.nonKeyAttributes)
			ToUpdate${entity.name}.${attribute.name} = updateDTO.${attribute.name};
#end
			// SAVE
			_context.SaveChanges();

            return Ok();
        }

        /// <summary>
        /// DELETE ${entity.name}
        /// Supprimer un ${entity.name} a partir de son identifiant ID
        /// </summary>
        /// <param name="id">id du ${entity.name} doit être supérieur à 0.</param>   
        /// <response code="200">OK, le ${entity.name} est supprimé.</response>
        /// <response code="400">Mauvaise requete, id non invalide.</response>
        /// <response code="404">Erreur, le ${entity.name} n'est pas trouvé a partir de l'id spécifié.</response>
        [HttpDelete()]
        [Route("{${keyFields[0].formattedName(0)}}")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult Delete${entity.name}(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)})
        {
			// FIND ITEM to DELETE 
			${entity.name}? ToDelete = _context.${entity.name}s
                                            .FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
			// DELETE 
            if (ToDelete == null)
                return NotFound($"Non trouvé avec l'ID = {${keyFields[0].formattedName(0)}}");
			_context.${entity.name}s.Remove(ToDelete);

			// SAVE
			_context.SaveChanges();

            return Ok();
        }
	}
}
